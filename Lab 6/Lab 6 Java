public boolean canFinish(int numCourses, int[][] prerequisites) {
    if (numCourses == 1) {  
        return true;
    }

    ArrayList<ArrayList<Integer>> adj = new ArrayList<>();
    for (int i = 0; i < numCourses; i++) {
        adj.add(new ArrayList<>());
    }

    int[] inD = new int[numCourses];
    for (int i = 0; i < prerequisites.length; i++) {
        int[] pair = prerequisites[i]; 
        adj.get(pair[1]).add(pair[0]); 
        inD[pair[0]]++; 
    }

    Queue<Integer> q = new LinkedList<>();
    for (int i = 0; i < numCourses; i++) {
        if (inD[i] == 0) {
            q.add(i);  
        }
    }

    int count = 0; 
    while (!q.isEmpty()) {
        int node = q.poll(); 
        count++;
        for (int edge : adj.get(node)) {
            inD[edge]--; 
            if (inD[edge] == 0) {
                q.add(edge); 
            }
        }
    }

    if(count = numCourses){
        return true;
    } else {
        return false;
    }
}